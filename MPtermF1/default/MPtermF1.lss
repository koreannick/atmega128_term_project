
MPtermF1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  00000fac  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080023a  0080023a  0000117a  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b6  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001921  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da3  00000000  00000000  00002e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010e3  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00004cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00004f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005f9  00000000  00000000  000052c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000058bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_1>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 34       	cpi	r26, 0x44	; 68
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a8 01 	call	0x350	; 0x350 <main>
  c6:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Usart_Init>:
//*****************************************

// 블루투스 통신을 위한 초기화
//*****************************************
void Usart_Init(){
    sei();  //인터럽트 허용
  ce:	78 94       	sei
   DDRE = 0xFE;  //RX(0),TX(1)
  d0:	8e ef       	ldi	r24, 0xFE	; 254
  d2:	82 b9       	out	0x02, r24	; 2

  UCSR1A = 0x00;
  d4:	10 92 9b 00 	sts	0x009B, r1
   UCSR1B = 0x98;
  d8:	88 e9       	ldi	r24, 0x98	; 152
  da:	80 93 9a 00 	sts	0x009A, r24
   UCSR1C = 0x06;
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 9d 00 	sts	0x009D, r24
   UBRR1H = 0x00;
  e4:	10 92 98 00 	sts	0x0098, r1
   UBRR1L = 103;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	80 93 99 00 	sts	0x0099, r24

}
  ee:	08 95       	ret

000000f0 <tx_char>:
/*char rx_char(void) {
 while((UCSR1A&0x80) == 0);
 return UDR1; }
*/

void tx_char(char tx_data){
  f0:	98 2f       	mov	r25, r24
 while((UCSR1A&0x20) == 0);
  f2:	80 91 9b 00 	lds	r24, 0x009B
  f6:	85 ff       	sbrs	r24, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <tx_char+0x2>
 UDR1 = tx_data; }
  fa:	90 93 9c 00 	sts	0x009C, r25
  fe:	08 95       	ret

00000100 <__vector_14>:


//인터럽트함수 설정
//*****************************************
//TIMER0 OVERFLOW 인터럽트 루틴
ISR(TIMER1_OVF_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25

TCNT1 =T_START;
 10e:	8c ed       	ldi	r24, 0xDC	; 220
 110:	9b e0       	ldi	r25, 0x0B	; 11
 112:	9d bd       	out	0x2d, r25	; 45
 114:	8c bd       	out	0x2c, r24	; 44
tmr_flag=SET;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 3d 02 	sts	0x023D, r24
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <__vector_1>:

//외부 인터럽트 설정
ISR(INT0_vect)            //외부인터럽트0 함수정의
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
if(k==1){
 13a:	80 91 3a 02 	lds	r24, 0x023A
 13e:	90 91 3b 02 	lds	r25, 0x023B
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	49 f4       	brne	.+18     	; 0x158 <__vector_1+0x2e>
MAX+=50;
 146:	80 91 30 01 	lds	r24, 0x0130
 14a:	90 91 31 01 	lds	r25, 0x0131
 14e:	c2 96       	adiw	r24, 0x32	; 50
 150:	90 93 31 01 	sts	0x0131, r25
 154:	80 93 30 01 	sts	0x0130, r24
}
if(MAX==850){
 158:	80 91 30 01 	lds	r24, 0x0130
 15c:	90 91 31 01 	lds	r25, 0x0131
 160:	82 55       	subi	r24, 0x52	; 82
 162:	93 40       	sbci	r25, 0x03	; 3
 164:	31 f4       	brne	.+12     	; 0x172 <__vector_1+0x48>
MAX=200;
 166:	88 ec       	ldi	r24, 0xC8	; 200
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 31 01 	sts	0x0131, r25
 16e:	80 93 30 01 	sts	0x0130, r24
}
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_2>:

ISR(INT1_vect)            //외부인터럽트1 함수정의
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
if(k==0){
 190:	80 91 3a 02 	lds	r24, 0x023A
 194:	90 91 3b 02 	lds	r25, 0x023B
 198:	89 2b       	or	r24, r25
 19a:	39 f4       	brne	.+14     	; 0x1aa <__vector_2+0x28>
k=1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 3b 02 	sts	0x023B, r25
 1a4:	80 93 3a 02 	sts	0x023A, r24
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__vector_2+0x30>
}
else{
k=0;
 1aa:	10 92 3b 02 	sts	0x023B, r1
 1ae:	10 92 3a 02 	sts	0x023A, r1
}
}
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <Delay_us>:
//*****************************************


//LCD 화면설정
//*****************************************
void Delay_us(BYTE time_us){ //us DELAY 함수정의
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <Delay_us+0x12>

BYTE i;                //DELAY함수 변수정의

for(i=0;i<time_us;i++){    //DELAY함수 FOR문
   asm volatile(" PUSH R0");//시간지연 사이클
 1c4:	0f 92       	push	r0
   asm volatile(" POP R0");
 1c6:	0f 90       	pop	r0
   asm volatile(" PUSH R0");
 1c8:	0f 92       	push	r0
   asm volatile(" POP R0");
 1ca:	0f 90       	pop	r0
   asm volatile(" PUSH R0");
 1cc:	0f 92       	push	r0
   asm volatile(" POP R0");
 1ce:	0f 90       	pop	r0
//*****************************************
void Delay_us(BYTE time_us){ //us DELAY 함수정의

BYTE i;                //DELAY함수 변수정의

for(i=0;i<time_us;i++){    //DELAY함수 FOR문
 1d0:	9f 5f       	subi	r25, 0xFF	; 255
 1d2:	98 17       	cp	r25, r24
 1d4:	b8 f3       	brcs	.-18     	; 0x1c4 <Delay_us+0x4>
   asm volatile(" PUSH R0");
   asm volatile(" POP R0");
   asm volatile(" PUSH R0");
   asm volatile(" POP R0");
   }
}
 1d6:	08 95       	ret

000001d8 <Delay_ms>:

void Delay_ms(unsigned int time_ms){ //ms DELAY 함수정의
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	0d c0       	rjmp	.+26     	; 0x202 <Delay_ms+0x2a>

unsigned int i;

for(i=0;i<time_ms;i++){    //1ms 시간지연
   Delay_us(250);
 1e8:	8a ef       	ldi	r24, 0xFA	; 250
 1ea:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
   Delay_us(250);
 1ee:	8a ef       	ldi	r24, 0xFA	; 250
 1f0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
   Delay_us(250);
 1f4:	8a ef       	ldi	r24, 0xFA	; 250
 1f6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
   Delay_us(250);
 1fa:	8a ef       	ldi	r24, 0xFA	; 250
 1fc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>

void Delay_ms(unsigned int time_ms){ //ms DELAY 함수정의

unsigned int i;

for(i=0;i<time_ms;i++){    //1ms 시간지연
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	c0 17       	cp	r28, r16
 204:	d1 07       	cpc	r29, r17
 206:	80 f3       	brcs	.-32     	; 0x1e8 <Delay_ms+0x10>
   Delay_us(250);
   Delay_us(250);
   Delay_us(250);
   Delay_us(250);
   }
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <lcd_write>:

void lcd_write(BYTE c){       //lcd 포트설정

PORTC = c;
 212:	85 bb       	out	0x15, r24	; 21
PORTE |= 0x20;
 214:	1d 9a       	sbi	0x03, 5	; 3
Delay_us(1);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
PORTE &= 0xDF;
 21c:	1d 98       	cbi	0x03, 5	; 3
Delay_us(250);
 21e:	8a ef       	ldi	r24, 0xFA	; 250
 220:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
}
 224:	08 95       	ret

00000226 <cursor_off>:

void cursor_off(){

PORTE &= 0x7F;
 226:	1f 98       	cbi	0x03, 7	; 3
Delay_ms(200);           //power on delay
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
lcd_write(0x0C);          //dispaly on, cursor off, blink off
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
Delay_ms(100);
 236:	84 e6       	ldi	r24, 0x64	; 100
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>

}
 23e:	08 95       	ret

00000240 <cursor_on>:

void cursor_on(){

PORTE &= 0x7F;
 240:	1f 98       	cbi	0x03, 7	; 3
Delay_ms(200);       //power on delay
 242:	88 ec       	ldi	r24, 0xC8	; 200
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
lcd_write(0x0F);   //dispaly on, cursor on, blink on
 24a:	8f e0       	ldi	r24, 0x0F	; 15
 24c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
Delay_ms(100);
 250:	84 e6       	ldi	r24, 0x64	; 100
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>

}
 258:	08 95       	ret

0000025a <lcd_clear>:

void lcd_clear(void){ //lcd clear함수정의

PORTE &= 0x7F;
 25a:	1f 98       	cbi	0x03, 7	; 3
Delay_ms(1);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
lcd_write(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
Delay_ms(4);
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>

}
 272:	08 95       	ret

00000274 <lcd_init>:

void lcd_init(){     //lcd화면 초기화

PORTE &= 0x7F;
 274:	1f 98       	cbi	0x03, 7	; 3
Delay_ms(200);      //power on delay
 276:	88 ec       	ldi	r24, 0xC8	; 200
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
lcd_write(0x38);   //8bit mode,
 27e:	88 e3       	ldi	r24, 0x38	; 56
 280:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
lcd_write(0x0F);   //dispaly on, cursor on, blink on
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
lcd_write(0x01);
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
Delay_ms(100);
 290:	84 e6       	ldi	r24, 0x64	; 100
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>

}
 298:	08 95       	ret

0000029a <lcd_gotoxy>:

//lcd
void lcd_gotoxy(unsigned char x, unsigned char y){
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	08 2f       	mov	r16, r24
 2a0:	16 2f       	mov	r17, r22

PORTE &= 0x7F;
 2a2:	1f 98       	cbi	0x03, 7	; 3
Delay_ms(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
if(y==1){
 2ac:	11 30       	cpi	r17, 0x01	; 1
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <lcd_gotoxy+0x1c>
   lcd_write(0x80+x);
 2b0:	80 2f       	mov	r24, r16
 2b2:	80 58       	subi	r24, 0x80	; 128
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <lcd_gotoxy+0x20>
}
else{
   lcd_write(0xC0+x);
 2b6:	80 2f       	mov	r24, r16
 2b8:	80 54       	subi	r24, 0x40	; 64
 2ba:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
}
}
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <lcd_puts>:

//lcd화면 문자배열정의
void lcd_puts(char *s){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24

PORTE |= 0x80;
 2ca:	1f 9a       	sbi	0x03, 7	; 3
Delay_us(1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
 2d2:	03 c0       	rjmp	.+6      	; 0x2da <lcd_puts+0x16>

while(*s)
lcd_write(*s++);
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_write>
void lcd_puts(char *s){

PORTE |= 0x80;
Delay_us(1);

while(*s)
 2da:	88 81       	ld	r24, Y
 2dc:	88 23       	and	r24, r24
 2de:	d1 f7       	brne	.-12     	; 0x2d4 <lcd_puts+0x10>
lcd_write(*s++);
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <lcd_putch>:

//lcd문자출력 함수정의
void lcd_putch(char c){
 2e6:	1f 93       	push	r17
 2e8:	18 2f       	mov	r17, r24

PORTE |=0x80;
 2ea:	1f 9a       	sbi	0x03, 7	; 3
Delay_us(1);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
PORTC = c;
 2f2:	15 bb       	out	0x15, r17	; 21

PORTE |=0x20;
 2f4:	1d 9a       	sbi	0x03, 5	; 3
Delay_us(1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
PORTE &=0xDF;
 2fc:	1d 98       	cbi	0x03, 5	; 3
Delay_us(250);
 2fe:	8a ef       	ldi	r24, 0xFA	; 250
 300:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Delay_us>
}
 304:	1f 91       	pop	r17
 306:	08 95       	ret

00000308 <ioport_set>:

//입출력 포트 세트
//*****************************************
void ioport_set(void){

DDRA = 0xFF;   //led포트 입력지정
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	8a bb       	out	0x1a, r24	; 26
DDRC = 0xFF;    //lcd포트 입력지정
 30c:	84 bb       	out	0x14, r24	; 20
//DDRE = 0xFF;   //송수신단포트 입력지정
DDRG = 0xFF;   //buzzer포트 입력지정
 30e:	80 93 64 00 	sts	0x0064, r24

PORTA = 0xFF;   //led포트 출력지정
 312:	8b bb       	out	0x1b, r24	; 27
PORTE = 0xBC;   //
 314:	8c eb       	ldi	r24, 0xBC	; 188
 316:	83 b9       	out	0x03, r24	; 3
PORTG = 0x10;
 318:	80 e1       	ldi	r24, 0x10	; 16
 31a:	80 93 65 00 	sts	0x0065, r24

}
 31e:	08 95       	ret

00000320 <init_interrupt>:

//인터럽트벡터 초기화
//*****************************************
void init_interrupt(void)
{
   EICRA=0x3B;
 320:	8b e3       	ldi	r24, 0x3B	; 59
 322:	80 93 6a 00 	sts	0x006A, r24
   EIMSK=0x07;
 326:	87 e0       	ldi	r24, 0x07	; 7
 328:	89 bf       	out	0x39, r24	; 57
   EIFR=0x00;
 32a:	18 be       	out	0x38, r1	; 56

   TCCR1B = 0x04;
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	8e bd       	out	0x2e, r24	; 46

   TIMSK = 0x04;
 330:	87 bf       	out	0x37, r24	; 55
   TIFR = 0x04;
 332:	86 bf       	out	0x36, r24	; 54

   TCNT1 = T_START;
 334:	8c ed       	ldi	r24, 0xDC	; 220
 336:	9b e0       	ldi	r25, 0x0B	; 11
 338:	9d bd       	out	0x2d, r25	; 45
 33a:	8c bd       	out	0x2c, r24	; 44
}
 33c:	08 95       	ret

0000033e <init_parameter>:

//타이머 변수초기화
//*****************************************
void init_parameter(){

tmr_cnt = 0;
 33e:	10 92 43 02 	sts	0x0243, r1
 342:	10 92 42 02 	sts	0x0242, r1
tmr_flag=CLR;
 346:	10 92 3d 02 	sts	0x023D, r1

second =0;
 34a:	10 92 3c 02 	sts	0x023C, r1
}
 34e:	08 95       	ret

00000350 <main>:
//*****************************************


//메인함수 정의
//*****************************************
int main(){
 350:	2f 92       	push	r2
 352:	3f 92       	push	r3
 354:	4f 92       	push	r4
 356:	5f 92       	push	r5
 358:	6f 92       	push	r6
 35a:	7f 92       	push	r7
 35c:	8f 92       	push	r8
 35e:	9f 92       	push	r9
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	00 d0       	rcall	.+0      	; 0x376 <main+0x26>
 376:	00 d0       	rcall	.+0      	; 0x378 <main+0x28>
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62

ADMUX=AD_CHO;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	87 b9       	out	0x07, r24	; 7
ADCSRA = 0x87;
 380:	87 e8       	ldi	r24, 0x87	; 135
 382:	86 b9       	out	0x06, r24	; 6
ioport_set();      //입출력포트 세팅
 384:	0e 94 84 01 	call	0x308	; 0x308 <ioport_set>
init_interrupt();   //인터럽트 등록
 388:	0e 94 90 01 	call	0x320	; 0x320 <init_interrupt>
sei();            //인터럽트 초기화
 38c:	78 94       	sei

Usart_Init();
 38e:	0e 94 67 00 	call	0xce	; 0xce <Usart_Init>
lcd_init();
 392:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_init>
cursor_off();
 396:	0e 94 13 01 	call	0x226	; 0x226 <cursor_off>



while(1){

ADCSRA = 0xC6;
 39a:	86 ec       	ldi	r24, 0xC6	; 198
 39c:	86 b9       	out	0x06, r24	; 6
Delay_ms(1);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
while((ADCSRA & AD_CHECK) != AD_CHECK);
 3a6:	34 9b       	sbis	0x06, 4	; 6
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0x56>
Data = ADC;
 3aa:	24 b1       	in	r18, 0x04	; 4
 3ac:	35 b1       	in	r19, 0x05	; 5
 3ae:	30 93 40 02 	sts	0x0240, r19
 3b2:	20 93 3f 02 	sts	0x023F, r18

if(Data>MAX){
 3b6:	80 91 30 01 	lds	r24, 0x0130
 3ba:	90 91 31 01 	lds	r25, 0x0131
 3be:	82 17       	cp	r24, r18
 3c0:	93 07       	cpc	r25, r19
 3c2:	44 f4       	brge	.+16     	; 0x3d4 <main+0x84>
 while((UCSR1A&0x80) == 0);
 return UDR1; }
*/

void tx_char(char tx_data){
 while((UCSR1A&0x20) == 0);
 3c4:	80 91 9b 00 	lds	r24, 0x009B
 3c8:	85 ff       	sbrs	r24, 5
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <main+0x74>
 UDR1 = tx_data; }
 3cc:	e1 e6       	ldi	r30, 0x61	; 97
 3ce:	e0 93 9c 00 	sts	0x009C, r30
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <main+0x92>
 while((UCSR1A&0x80) == 0);
 return UDR1; }
*/

void tx_char(char tx_data){
 while((UCSR1A&0x20) == 0);
 3d4:	80 91 9b 00 	lds	r24, 0x009B
 3d8:	85 ff       	sbrs	r24, 5
 3da:	fc cf       	rjmp	.-8      	; 0x3d4 <main+0x84>
 UDR1 = tx_data; }
 3dc:	f0 e3       	ldi	r31, 0x30	; 48
 3de:	f0 93 9c 00 	sts	0x009C, r31
}
else{
   tx_char('0');
}

if(k==0){
 3e2:	80 91 3a 02 	lds	r24, 0x023A
 3e6:	90 91 3b 02 	lds	r25, 0x023B
 3ea:	89 2b       	or	r24, r25
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <main+0xa0>
 3ee:	5b c0       	rjmp	.+182    	; 0x4a6 <main+0x156>
lcd_gotoxy(0,1);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_gotoxy>
lcd_puts("[PRESENT VALUE]");
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_puts>
lcd_gotoxy(0,2);
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_gotoxy>
lcd_puts("[NOW = ");                     //
 408:	80 e1       	ldi	r24, 0x10	; 16
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_puts>
lcd_putch((Data/1000)+'0');
 410:	80 91 3f 02 	lds	r24, 0x023F
 414:	90 91 40 02 	lds	r25, 0x0240
 418:	68 ee       	ldi	r22, 0xE8	; 232
 41a:	73 e0       	ldi	r23, 0x03	; 3
 41c:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 420:	86 2f       	mov	r24, r22
 422:	80 5d       	subi	r24, 0xD0	; 208
 424:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch(((Data %1000)/100)+'0');
 428:	80 91 3f 02 	lds	r24, 0x023F
 42c:	90 91 40 02 	lds	r25, 0x0240
 430:	68 ee       	ldi	r22, 0xE8	; 232
 432:	73 e0       	ldi	r23, 0x03	; 3
 434:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 438:	64 e6       	ldi	r22, 0x64	; 100
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 440:	86 2f       	mov	r24, r22
 442:	80 5d       	subi	r24, 0xD0	; 208
 444:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch((((Data %1000)%100)/10)+'0');
 448:	80 91 3f 02 	lds	r24, 0x023F
 44c:	90 91 40 02 	lds	r25, 0x0240
 450:	68 ee       	ldi	r22, 0xE8	; 232
 452:	73 e0       	ldi	r23, 0x03	; 3
 454:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 458:	64 e6       	ldi	r22, 0x64	; 100
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 460:	6a e0       	ldi	r22, 0x0A	; 10
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 468:	86 2f       	mov	r24, r22
 46a:	80 5d       	subi	r24, 0xD0	; 208
 46c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch((((Data %1000)%100)%10)+'0');
 470:	80 91 3f 02 	lds	r24, 0x023F
 474:	90 91 40 02 	lds	r25, 0x0240
 478:	68 ee       	ldi	r22, 0xE8	; 232
 47a:	73 e0       	ldi	r23, 0x03	; 3
 47c:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 480:	64 e6       	ldi	r22, 0x64	; 100
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 488:	6a e0       	ldi	r22, 0x0A	; 10
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 490:	80 5d       	subi	r24, 0xD0	; 208
 492:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch(']');
 496:	8d e5       	ldi	r24, 0x5D	; 93
 498:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
Delay_ms(100);
 49c:	84 e6       	ldi	r24, 0x64	; 100
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Delay_ms>
 4a4:	56 c0       	rjmp	.+172    	; 0x552 <main+0x202>
}

else{
lcd_gotoxy(0,1);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_gotoxy>
lcd_puts("[SETTING VALUE]");
 4ae:	88 e1       	ldi	r24, 0x18	; 24
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_puts>
lcd_gotoxy(0,2);
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	62 e0       	ldi	r22, 0x02	; 2
 4ba:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_gotoxy>
lcd_puts("[MAX = ");
 4be:	88 e2       	ldi	r24, 0x28	; 40
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_puts>
lcd_putch((MAX/1000)+'0');
 4c6:	80 91 30 01 	lds	r24, 0x0130
 4ca:	90 91 31 01 	lds	r25, 0x0131
 4ce:	68 ee       	ldi	r22, 0xE8	; 232
 4d0:	73 e0       	ldi	r23, 0x03	; 3
 4d2:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 4d6:	86 2f       	mov	r24, r22
 4d8:	80 5d       	subi	r24, 0xD0	; 208
 4da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch(((MAX%1000)/100)+'0');
 4de:	80 91 30 01 	lds	r24, 0x0130
 4e2:	90 91 31 01 	lds	r25, 0x0131
 4e6:	68 ee       	ldi	r22, 0xE8	; 232
 4e8:	73 e0       	ldi	r23, 0x03	; 3
 4ea:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 4ee:	64 e6       	ldi	r22, 0x64	; 100
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 4f6:	86 2f       	mov	r24, r22
 4f8:	80 5d       	subi	r24, 0xD0	; 208
 4fa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch((((MAX%1000)%100)/10)+'0');
 4fe:	80 91 30 01 	lds	r24, 0x0130
 502:	90 91 31 01 	lds	r25, 0x0131
 506:	68 ee       	ldi	r22, 0xE8	; 232
 508:	73 e0       	ldi	r23, 0x03	; 3
 50a:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 50e:	64 e6       	ldi	r22, 0x64	; 100
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 516:	6a e0       	ldi	r22, 0x0A	; 10
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 51e:	86 2f       	mov	r24, r22
 520:	80 5d       	subi	r24, 0xD0	; 208
 522:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch((((MAX%1000)%100)%10)+'0');
 526:	80 91 30 01 	lds	r24, 0x0130
 52a:	90 91 31 01 	lds	r25, 0x0131
 52e:	68 ee       	ldi	r22, 0xE8	; 232
 530:	73 e0       	ldi	r23, 0x03	; 3
 532:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 536:	64 e6       	ldi	r22, 0x64	; 100
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 53e:	6a e0       	ldi	r22, 0x0A	; 10
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	0e 94 76 07 	call	0xeec	; 0xeec <__divmodhi4>
 546:	80 5d       	subi	r24, 0xD0	; 208
 548:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
lcd_putch(']');
 54c:	8d e5       	ldi	r24, 0x5D	; 93
 54e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_putch>
}

//소음수치별 LED점등
if(Data>=(MAX)){
 552:	20 91 3f 02 	lds	r18, 0x023F
 556:	30 91 40 02 	lds	r19, 0x0240
 55a:	c0 90 30 01 	lds	r12, 0x0130
 55e:	d0 90 31 01 	lds	r13, 0x0131
 562:	2c 15       	cp	r18, r12
 564:	3d 05       	cpc	r19, r13
 566:	14 f0       	brlt	.+4      	; 0x56c <main+0x21c>
PORTA = ~0xFF;
 568:	1b ba       	out	0x1b, r1	; 27
 56a:	02 c1       	rjmp	.+516    	; 0x770 <main+0x420>
}
else if(Data>=(MAX*0.9) &&Data<(MAX*0.9)){
 56c:	b9 01       	movw	r22, r18
 56e:	88 27       	eor	r24, r24
 570:	77 fd       	sbrc	r23, 7
 572:	80 95       	com	r24
 574:	98 2f       	mov	r25, r24
 576:	0e 94 23 05 	call	0xa46	; 0xa46 <__floatsisf>
 57a:	7b 01       	movw	r14, r22
 57c:	8c 01       	movw	r16, r24
 57e:	b6 01       	movw	r22, r12
 580:	88 27       	eor	r24, r24
 582:	77 fd       	sbrc	r23, 7
 584:	80 95       	com	r24
 586:	98 2f       	mov	r25, r24
 588:	0e 94 23 05 	call	0xa46	; 0xa46 <__floatsisf>
 58c:	3b 01       	movw	r6, r22
 58e:	4c 01       	movw	r8, r24
 590:	26 e6       	ldi	r18, 0x66	; 102
 592:	36 e6       	ldi	r19, 0x66	; 102
 594:	46 e6       	ldi	r20, 0x66	; 102
 596:	5f e3       	ldi	r21, 0x3F	; 63
 598:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 59c:	5b 01       	movw	r10, r22
 59e:	6c 01       	movw	r12, r24
 5a0:	c8 01       	movw	r24, r16
 5a2:	b7 01       	movw	r22, r14
 5a4:	a6 01       	movw	r20, r12
 5a6:	95 01       	movw	r18, r10
 5a8:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 5ac:	88 23       	and	r24, r24
 5ae:	54 f0       	brlt	.+20     	; 0x5c4 <main+0x274>
 5b0:	c8 01       	movw	r24, r16
 5b2:	b7 01       	movw	r22, r14
 5b4:	a6 01       	movw	r20, r12
 5b6:	95 01       	movw	r18, r10
 5b8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 5bc:	88 23       	and	r24, r24
 5be:	14 f4       	brge	.+4      	; 0x5c4 <main+0x274>
PORTA = ~0xFE;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	1b c0       	rjmp	.+54     	; 0x5fa <main+0x2aa>
}
else if(Data>=(MAX*0.8) &&Data<(MAX*0.9)){
 5c4:	c4 01       	movw	r24, r8
 5c6:	b3 01       	movw	r22, r6
 5c8:	2d ec       	ldi	r18, 0xCD	; 205
 5ca:	3c ec       	ldi	r19, 0xCC	; 204
 5cc:	4c e4       	ldi	r20, 0x4C	; 76
 5ce:	5f e3       	ldi	r21, 0x3F	; 63
 5d0:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 5d4:	1b 01       	movw	r2, r22
 5d6:	2c 01       	movw	r4, r24
 5d8:	c8 01       	movw	r24, r16
 5da:	b7 01       	movw	r22, r14
 5dc:	a2 01       	movw	r20, r4
 5de:	91 01       	movw	r18, r2
 5e0:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 5e4:	88 23       	and	r24, r24
 5e6:	5c f0       	brlt	.+22     	; 0x5fe <main+0x2ae>
 5e8:	c8 01       	movw	r24, r16
 5ea:	b7 01       	movw	r22, r14
 5ec:	a6 01       	movw	r20, r12
 5ee:	95 01       	movw	r18, r10
 5f0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 5f4:	88 23       	and	r24, r24
 5f6:	1c f4       	brge	.+6      	; 0x5fe <main+0x2ae>
PORTA = ~0xFC;
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	8b bb       	out	0x1b, r24	; 27
 5fc:	b9 c0       	rjmp	.+370    	; 0x770 <main+0x420>
}
else if(Data>=(MAX*0.7) &&Data<(MAX*0.8)){
 5fe:	c4 01       	movw	r24, r8
 600:	b3 01       	movw	r22, r6
 602:	23 e3       	ldi	r18, 0x33	; 51
 604:	33 e3       	ldi	r19, 0x33	; 51
 606:	43 e3       	ldi	r20, 0x33	; 51
 608:	5f e3       	ldi	r21, 0x3F	; 63
 60a:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 60e:	5b 01       	movw	r10, r22
 610:	6c 01       	movw	r12, r24
 612:	c8 01       	movw	r24, r16
 614:	b7 01       	movw	r22, r14
 616:	a6 01       	movw	r20, r12
 618:	95 01       	movw	r18, r10
 61a:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 61e:	88 23       	and	r24, r24
 620:	54 f0       	brlt	.+20     	; 0x636 <main+0x2e6>
 622:	c8 01       	movw	r24, r16
 624:	b7 01       	movw	r22, r14
 626:	a2 01       	movw	r20, r4
 628:	91 01       	movw	r18, r2
 62a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 62e:	88 23       	and	r24, r24
 630:	14 f4       	brge	.+4      	; 0x636 <main+0x2e6>
PORTA = ~0xF8;
 632:	e7 e0       	ldi	r30, 0x07	; 7
 634:	9c c0       	rjmp	.+312    	; 0x76e <main+0x41e>
}
else if(Data>=(MAX*0.6) &&Data<(MAX*0.7)){
 636:	c4 01       	movw	r24, r8
 638:	b3 01       	movw	r22, r6
 63a:	2a e9       	ldi	r18, 0x9A	; 154
 63c:	39 e9       	ldi	r19, 0x99	; 153
 63e:	49 e1       	ldi	r20, 0x19	; 25
 640:	5f e3       	ldi	r21, 0x3F	; 63
 642:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 646:	1b 01       	movw	r2, r22
 648:	2c 01       	movw	r4, r24
 64a:	c8 01       	movw	r24, r16
 64c:	b7 01       	movw	r22, r14
 64e:	a2 01       	movw	r20, r4
 650:	91 01       	movw	r18, r2
 652:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 656:	88 23       	and	r24, r24
 658:	54 f0       	brlt	.+20     	; 0x66e <main+0x31e>
 65a:	c8 01       	movw	r24, r16
 65c:	b7 01       	movw	r22, r14
 65e:	a6 01       	movw	r20, r12
 660:	95 01       	movw	r18, r10
 662:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 666:	88 23       	and	r24, r24
 668:	14 f4       	brge	.+4      	; 0x66e <main+0x31e>
PORTA = ~0xF0;
 66a:	ff e0       	ldi	r31, 0x0F	; 15
 66c:	57 c0       	rjmp	.+174    	; 0x71c <main+0x3cc>
}
else if(Data>=(MAX*0.5) &&Data<(MAX*0.6)){
 66e:	c4 01       	movw	r24, r8
 670:	b3 01       	movw	r22, r6
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	5f e3       	ldi	r21, 0x3F	; 63
 67a:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 67e:	5b 01       	movw	r10, r22
 680:	6c 01       	movw	r12, r24
 682:	c8 01       	movw	r24, r16
 684:	b7 01       	movw	r22, r14
 686:	a6 01       	movw	r20, r12
 688:	95 01       	movw	r18, r10
 68a:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 68e:	88 23       	and	r24, r24
 690:	54 f0       	brlt	.+20     	; 0x6a6 <main+0x356>
 692:	c8 01       	movw	r24, r16
 694:	b7 01       	movw	r22, r14
 696:	a2 01       	movw	r20, r4
 698:	91 01       	movw	r18, r2
 69a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 69e:	88 23       	and	r24, r24
 6a0:	14 f4       	brge	.+4      	; 0x6a6 <main+0x356>
PORTA = ~0xE0;
 6a2:	8f e1       	ldi	r24, 0x1F	; 31
 6a4:	aa cf       	rjmp	.-172    	; 0x5fa <main+0x2aa>
}
else if(Data>=(MAX*0.4) &&Data<(MAX*0.5)){
 6a6:	c4 01       	movw	r24, r8
 6a8:	b3 01       	movw	r22, r6
 6aa:	2d ec       	ldi	r18, 0xCD	; 205
 6ac:	3c ec       	ldi	r19, 0xCC	; 204
 6ae:	4c ec       	ldi	r20, 0xCC	; 204
 6b0:	5e e3       	ldi	r21, 0x3E	; 62
 6b2:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 6b6:	1b 01       	movw	r2, r22
 6b8:	2c 01       	movw	r4, r24
 6ba:	c8 01       	movw	r24, r16
 6bc:	b7 01       	movw	r22, r14
 6be:	a2 01       	movw	r20, r4
 6c0:	91 01       	movw	r18, r2
 6c2:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 6c6:	88 23       	and	r24, r24
 6c8:	54 f0       	brlt	.+20     	; 0x6de <main+0x38e>
 6ca:	c8 01       	movw	r24, r16
 6cc:	b7 01       	movw	r22, r14
 6ce:	a6 01       	movw	r20, r12
 6d0:	95 01       	movw	r18, r10
 6d2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 6d6:	88 23       	and	r24, r24
 6d8:	14 f4       	brge	.+4      	; 0x6de <main+0x38e>
PORTA = ~0xC0;
 6da:	ef e3       	ldi	r30, 0x3F	; 63
 6dc:	48 c0       	rjmp	.+144    	; 0x76e <main+0x41e>
}
else if(Data>=(MAX*0.3) &&Data<(MAX*0.4)){
 6de:	c4 01       	movw	r24, r8
 6e0:	b3 01       	movw	r22, r6
 6e2:	2a e9       	ldi	r18, 0x9A	; 154
 6e4:	39 e9       	ldi	r19, 0x99	; 153
 6e6:	49 e9       	ldi	r20, 0x99	; 153
 6e8:	5e e3       	ldi	r21, 0x3E	; 62
 6ea:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 6ee:	69 83       	std	Y+1, r22	; 0x01
 6f0:	7a 83       	std	Y+2, r23	; 0x02
 6f2:	8b 83       	std	Y+3, r24	; 0x03
 6f4:	9c 83       	std	Y+4, r25	; 0x04
 6f6:	c8 01       	movw	r24, r16
 6f8:	b7 01       	movw	r22, r14
 6fa:	29 81       	ldd	r18, Y+1	; 0x01
 6fc:	3a 81       	ldd	r19, Y+2	; 0x02
 6fe:	4b 81       	ldd	r20, Y+3	; 0x03
 700:	5c 81       	ldd	r21, Y+4	; 0x04
 702:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 706:	88 23       	and	r24, r24
 708:	5c f0       	brlt	.+22     	; 0x720 <main+0x3d0>
 70a:	c8 01       	movw	r24, r16
 70c:	b7 01       	movw	r22, r14
 70e:	a2 01       	movw	r20, r4
 710:	91 01       	movw	r18, r2
 712:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 716:	88 23       	and	r24, r24
 718:	1c f4       	brge	.+6      	; 0x720 <main+0x3d0>
PORTA = ~0x80;
 71a:	ff e7       	ldi	r31, 0x7F	; 127
 71c:	fb bb       	out	0x1b, r31	; 27
 71e:	28 c0       	rjmp	.+80     	; 0x770 <main+0x420>
}
else if(Data>=(MAX*0.2) &&Data<(MAX*0.3)){
 720:	c4 01       	movw	r24, r8
 722:	b3 01       	movw	r22, r6
 724:	2d ec       	ldi	r18, 0xCD	; 205
 726:	3c ec       	ldi	r19, 0xCC	; 204
 728:	4c e4       	ldi	r20, 0x4C	; 76
 72a:	5e e3       	ldi	r21, 0x3E	; 62
 72c:	0e 94 c9 03 	call	0x792	; 0x792 <__mulsf3>
 730:	5b 01       	movw	r10, r22
 732:	6c 01       	movw	r12, r24
 734:	c8 01       	movw	r24, r16
 736:	b7 01       	movw	r22, r14
 738:	a6 01       	movw	r20, r12
 73a:	95 01       	movw	r18, r10
 73c:	0e 94 c3 04 	call	0x986	; 0x986 <__gesf2>
 740:	88 23       	and	r24, r24
 742:	64 f0       	brlt	.+24     	; 0x75c <main+0x40c>
 744:	c8 01       	movw	r24, r16
 746:	b7 01       	movw	r22, r14
 748:	29 81       	ldd	r18, Y+1	; 0x01
 74a:	3a 81       	ldd	r19, Y+2	; 0x02
 74c:	4b 81       	ldd	r20, Y+3	; 0x03
 74e:	5c 81       	ldd	r21, Y+4	; 0x04
 750:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 754:	88 23       	and	r24, r24
 756:	14 f4       	brge	.+4      	; 0x75c <main+0x40c>
PORTA = ~0x80;
 758:	8f e7       	ldi	r24, 0x7F	; 127
 75a:	4f cf       	rjmp	.-354    	; 0x5fa <main+0x2aa>
}
else if(Data<(MAX*0.2)){
 75c:	c8 01       	movw	r24, r16
 75e:	b7 01       	movw	r22, r14
 760:	a6 01       	movw	r20, r12
 762:	95 01       	movw	r18, r10
 764:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__ltsf2>
 768:	88 23       	and	r24, r24
 76a:	14 f4       	brge	.+4      	; 0x770 <main+0x420>
PORTA = ~0x00;
 76c:	ef ef       	ldi	r30, 0xFF	; 255
 76e:	eb bb       	out	0x1b, r30	; 27
}


if(tmr_flag == SET){
 770:	80 91 3d 02 	lds	r24, 0x023D
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	09 f0       	breq	.+2      	; 0x77a <main+0x42a>
 778:	10 ce       	rjmp	.-992    	; 0x39a <main+0x4a>
if(++second == 60)
 77a:	80 91 3c 02 	lds	r24, 0x023C
 77e:	8f 5f       	subi	r24, 0xFF	; 255
 780:	80 93 3c 02 	sts	0x023C, r24
 784:	8c 33       	cpi	r24, 0x3C	; 60
 786:	11 f4       	brne	.+4      	; 0x78c <main+0x43c>
   second = 0;
 788:	10 92 3c 02 	sts	0x023C, r1

tmr_flag = CLR;
 78c:	10 92 3d 02 	sts	0x023D, r1
 790:	04 ce       	rjmp	.-1016   	; 0x39a <main+0x4a>

00000792 <__mulsf3>:
 792:	a0 e2       	ldi	r26, 0x20	; 32
 794:	b0 e0       	ldi	r27, 0x00	; 0
 796:	ef ec       	ldi	r30, 0xCF	; 207
 798:	f3 e0       	ldi	r31, 0x03	; 3
 79a:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__prologue_saves__>
 79e:	69 83       	std	Y+1, r22	; 0x01
 7a0:	7a 83       	std	Y+2, r23	; 0x02
 7a2:	8b 83       	std	Y+3, r24	; 0x03
 7a4:	9c 83       	std	Y+4, r25	; 0x04
 7a6:	2d 83       	std	Y+5, r18	; 0x05
 7a8:	3e 83       	std	Y+6, r19	; 0x06
 7aa:	4f 83       	std	Y+7, r20	; 0x07
 7ac:	58 87       	std	Y+8, r21	; 0x08
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	be 01       	movw	r22, r28
 7b4:	67 5f       	subi	r22, 0xF7	; 247
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 7bc:	ce 01       	movw	r24, r28
 7be:	05 96       	adiw	r24, 0x05	; 5
 7c0:	be 01       	movw	r22, r28
 7c2:	6f 5e       	subi	r22, 0xEF	; 239
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 7ca:	99 85       	ldd	r25, Y+9	; 0x09
 7cc:	92 30       	cpi	r25, 0x02	; 2
 7ce:	88 f0       	brcs	.+34     	; 0x7f2 <__mulsf3+0x60>
 7d0:	89 89       	ldd	r24, Y+17	; 0x11
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	c8 f0       	brcs	.+50     	; 0x808 <__mulsf3+0x76>
 7d6:	94 30       	cpi	r25, 0x04	; 4
 7d8:	19 f4       	brne	.+6      	; 0x7e0 <__mulsf3+0x4e>
 7da:	82 30       	cpi	r24, 0x02	; 2
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <__mulsf3+0x60>
 7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__mulsf3+0x56>
 7e0:	84 30       	cpi	r24, 0x04	; 4
 7e2:	29 f4       	brne	.+10     	; 0x7ee <__mulsf3+0x5c>
 7e4:	92 30       	cpi	r25, 0x02	; 2
 7e6:	81 f4       	brne	.+32     	; 0x808 <__mulsf3+0x76>
 7e8:	82 e3       	ldi	r24, 0x32	; 50
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	c6 c0       	rjmp	.+396    	; 0x97a <__mulsf3+0x1e8>
 7ee:	92 30       	cpi	r25, 0x02	; 2
 7f0:	49 f4       	brne	.+18     	; 0x804 <__mulsf3+0x72>
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 7f6:	8a 89       	ldd	r24, Y+18	; 0x12
 7f8:	98 13       	cpse	r25, r24
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	2a 87       	std	Y+10, r18	; 0x0a
 7fe:	ce 01       	movw	r24, r28
 800:	09 96       	adiw	r24, 0x09	; 9
 802:	bb c0       	rjmp	.+374    	; 0x97a <__mulsf3+0x1e8>
 804:	82 30       	cpi	r24, 0x02	; 2
 806:	49 f4       	brne	.+18     	; 0x81a <__mulsf3+0x88>
 808:	20 e0       	ldi	r18, 0x00	; 0
 80a:	9a 85       	ldd	r25, Y+10	; 0x0a
 80c:	8a 89       	ldd	r24, Y+18	; 0x12
 80e:	98 13       	cpse	r25, r24
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	2a 8b       	std	Y+18, r18	; 0x12
 814:	ce 01       	movw	r24, r28
 816:	41 96       	adiw	r24, 0x11	; 17
 818:	b0 c0       	rjmp	.+352    	; 0x97a <__mulsf3+0x1e8>
 81a:	2d 84       	ldd	r2, Y+13	; 0x0d
 81c:	3e 84       	ldd	r3, Y+14	; 0x0e
 81e:	4f 84       	ldd	r4, Y+15	; 0x0f
 820:	58 88       	ldd	r5, Y+16	; 0x10
 822:	6d 88       	ldd	r6, Y+21	; 0x15
 824:	7e 88       	ldd	r7, Y+22	; 0x16
 826:	8f 88       	ldd	r8, Y+23	; 0x17
 828:	98 8c       	ldd	r9, Y+24	; 0x18
 82a:	ee 24       	eor	r14, r14
 82c:	ff 24       	eor	r15, r15
 82e:	87 01       	movw	r16, r14
 830:	aa 24       	eor	r10, r10
 832:	bb 24       	eor	r11, r11
 834:	65 01       	movw	r12, r10
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	e0 e0       	ldi	r30, 0x00	; 0
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	c1 01       	movw	r24, r2
 844:	81 70       	andi	r24, 0x01	; 1
 846:	90 70       	andi	r25, 0x00	; 0
 848:	89 2b       	or	r24, r25
 84a:	e9 f0       	breq	.+58     	; 0x886 <__mulsf3+0xf4>
 84c:	e6 0c       	add	r14, r6
 84e:	f7 1c       	adc	r15, r7
 850:	08 1d       	adc	r16, r8
 852:	19 1d       	adc	r17, r9
 854:	9a 01       	movw	r18, r20
 856:	ab 01       	movw	r20, r22
 858:	2a 0d       	add	r18, r10
 85a:	3b 1d       	adc	r19, r11
 85c:	4c 1d       	adc	r20, r12
 85e:	5d 1d       	adc	r21, r13
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	a0 e0       	ldi	r26, 0x00	; 0
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	e6 14       	cp	r14, r6
 86a:	f7 04       	cpc	r15, r7
 86c:	08 05       	cpc	r16, r8
 86e:	19 05       	cpc	r17, r9
 870:	20 f4       	brcc	.+8      	; 0x87a <__mulsf3+0xe8>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	a0 e0       	ldi	r26, 0x00	; 0
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	ba 01       	movw	r22, r20
 87c:	a9 01       	movw	r20, r18
 87e:	48 0f       	add	r20, r24
 880:	59 1f       	adc	r21, r25
 882:	6a 1f       	adc	r22, r26
 884:	7b 1f       	adc	r23, r27
 886:	aa 0c       	add	r10, r10
 888:	bb 1c       	adc	r11, r11
 88a:	cc 1c       	adc	r12, r12
 88c:	dd 1c       	adc	r13, r13
 88e:	97 fe       	sbrs	r9, 7
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <__mulsf3+0x110>
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	a0 e0       	ldi	r26, 0x00	; 0
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	a8 2a       	or	r10, r24
 89c:	b9 2a       	or	r11, r25
 89e:	ca 2a       	or	r12, r26
 8a0:	db 2a       	or	r13, r27
 8a2:	31 96       	adiw	r30, 0x01	; 1
 8a4:	e0 32       	cpi	r30, 0x20	; 32
 8a6:	f1 05       	cpc	r31, r1
 8a8:	49 f0       	breq	.+18     	; 0x8bc <__mulsf3+0x12a>
 8aa:	66 0c       	add	r6, r6
 8ac:	77 1c       	adc	r7, r7
 8ae:	88 1c       	adc	r8, r8
 8b0:	99 1c       	adc	r9, r9
 8b2:	56 94       	lsr	r5
 8b4:	47 94       	ror	r4
 8b6:	37 94       	ror	r3
 8b8:	27 94       	ror	r2
 8ba:	c3 cf       	rjmp	.-122    	; 0x842 <__mulsf3+0xb0>
 8bc:	fa 85       	ldd	r31, Y+10	; 0x0a
 8be:	ea 89       	ldd	r30, Y+18	; 0x12
 8c0:	2b 89       	ldd	r18, Y+19	; 0x13
 8c2:	3c 89       	ldd	r19, Y+20	; 0x14
 8c4:	8b 85       	ldd	r24, Y+11	; 0x0b
 8c6:	9c 85       	ldd	r25, Y+12	; 0x0c
 8c8:	28 0f       	add	r18, r24
 8ca:	39 1f       	adc	r19, r25
 8cc:	2e 5f       	subi	r18, 0xFE	; 254
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	17 c0       	rjmp	.+46     	; 0x900 <__mulsf3+0x16e>
 8d2:	ca 01       	movw	r24, r20
 8d4:	81 70       	andi	r24, 0x01	; 1
 8d6:	90 70       	andi	r25, 0x00	; 0
 8d8:	89 2b       	or	r24, r25
 8da:	61 f0       	breq	.+24     	; 0x8f4 <__mulsf3+0x162>
 8dc:	16 95       	lsr	r17
 8de:	07 95       	ror	r16
 8e0:	f7 94       	ror	r15
 8e2:	e7 94       	ror	r14
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	a0 e0       	ldi	r26, 0x00	; 0
 8ea:	b0 e8       	ldi	r27, 0x80	; 128
 8ec:	e8 2a       	or	r14, r24
 8ee:	f9 2a       	or	r15, r25
 8f0:	0a 2b       	or	r16, r26
 8f2:	1b 2b       	or	r17, r27
 8f4:	76 95       	lsr	r23
 8f6:	67 95       	ror	r22
 8f8:	57 95       	ror	r21
 8fa:	47 95       	ror	r20
 8fc:	2f 5f       	subi	r18, 0xFF	; 255
 8fe:	3f 4f       	sbci	r19, 0xFF	; 255
 900:	77 fd       	sbrc	r23, 7
 902:	e7 cf       	rjmp	.-50     	; 0x8d2 <__mulsf3+0x140>
 904:	0c c0       	rjmp	.+24     	; 0x91e <__mulsf3+0x18c>
 906:	44 0f       	add	r20, r20
 908:	55 1f       	adc	r21, r21
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	17 fd       	sbrc	r17, 7
 910:	41 60       	ori	r20, 0x01	; 1
 912:	ee 0c       	add	r14, r14
 914:	ff 1c       	adc	r15, r15
 916:	00 1f       	adc	r16, r16
 918:	11 1f       	adc	r17, r17
 91a:	21 50       	subi	r18, 0x01	; 1
 91c:	30 40       	sbci	r19, 0x00	; 0
 91e:	40 30       	cpi	r20, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	59 07       	cpc	r21, r25
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	69 07       	cpc	r22, r25
 928:	90 e4       	ldi	r25, 0x40	; 64
 92a:	79 07       	cpc	r23, r25
 92c:	60 f3       	brcs	.-40     	; 0x906 <__mulsf3+0x174>
 92e:	2b 8f       	std	Y+27, r18	; 0x1b
 930:	3c 8f       	std	Y+28, r19	; 0x1c
 932:	db 01       	movw	r26, r22
 934:	ca 01       	movw	r24, r20
 936:	8f 77       	andi	r24, 0x7F	; 127
 938:	90 70       	andi	r25, 0x00	; 0
 93a:	a0 70       	andi	r26, 0x00	; 0
 93c:	b0 70       	andi	r27, 0x00	; 0
 93e:	80 34       	cpi	r24, 0x40	; 64
 940:	91 05       	cpc	r25, r1
 942:	a1 05       	cpc	r26, r1
 944:	b1 05       	cpc	r27, r1
 946:	61 f4       	brne	.+24     	; 0x960 <__mulsf3+0x1ce>
 948:	47 fd       	sbrc	r20, 7
 94a:	0a c0       	rjmp	.+20     	; 0x960 <__mulsf3+0x1ce>
 94c:	e1 14       	cp	r14, r1
 94e:	f1 04       	cpc	r15, r1
 950:	01 05       	cpc	r16, r1
 952:	11 05       	cpc	r17, r1
 954:	29 f0       	breq	.+10     	; 0x960 <__mulsf3+0x1ce>
 956:	40 5c       	subi	r20, 0xC0	; 192
 958:	5f 4f       	sbci	r21, 0xFF	; 255
 95a:	6f 4f       	sbci	r22, 0xFF	; 255
 95c:	7f 4f       	sbci	r23, 0xFF	; 255
 95e:	40 78       	andi	r20, 0x80	; 128
 960:	1a 8e       	std	Y+26, r1	; 0x1a
 962:	fe 17       	cp	r31, r30
 964:	11 f0       	breq	.+4      	; 0x96a <__mulsf3+0x1d8>
 966:	81 e0       	ldi	r24, 0x01	; 1
 968:	8a 8f       	std	Y+26, r24	; 0x1a
 96a:	4d 8f       	std	Y+29, r20	; 0x1d
 96c:	5e 8f       	std	Y+30, r21	; 0x1e
 96e:	6f 8f       	std	Y+31, r22	; 0x1f
 970:	78 a3       	std	Y+32, r23	; 0x20
 972:	83 e0       	ldi	r24, 0x03	; 3
 974:	89 8f       	std	Y+25, r24	; 0x19
 976:	ce 01       	movw	r24, r28
 978:	49 96       	adiw	r24, 0x19	; 25
 97a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__pack_f>
 97e:	a0 96       	adiw	r28, 0x20	; 32
 980:	e2 e1       	ldi	r30, 0x12	; 18
 982:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__epilogue_restores__>

00000986 <__gesf2>:
 986:	a8 e1       	ldi	r26, 0x18	; 24
 988:	b0 e0       	ldi	r27, 0x00	; 0
 98a:	e9 ec       	ldi	r30, 0xC9	; 201
 98c:	f4 e0       	ldi	r31, 0x04	; 4
 98e:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__prologue_saves__+0x18>
 992:	69 83       	std	Y+1, r22	; 0x01
 994:	7a 83       	std	Y+2, r23	; 0x02
 996:	8b 83       	std	Y+3, r24	; 0x03
 998:	9c 83       	std	Y+4, r25	; 0x04
 99a:	2d 83       	std	Y+5, r18	; 0x05
 99c:	3e 83       	std	Y+6, r19	; 0x06
 99e:	4f 83       	std	Y+7, r20	; 0x07
 9a0:	58 87       	std	Y+8, r21	; 0x08
 9a2:	89 e0       	ldi	r24, 0x09	; 9
 9a4:	e8 2e       	mov	r14, r24
 9a6:	f1 2c       	mov	r15, r1
 9a8:	ec 0e       	add	r14, r28
 9aa:	fd 1e       	adc	r15, r29
 9ac:	ce 01       	movw	r24, r28
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	b7 01       	movw	r22, r14
 9b2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 9b6:	8e 01       	movw	r16, r28
 9b8:	0f 5e       	subi	r16, 0xEF	; 239
 9ba:	1f 4f       	sbci	r17, 0xFF	; 255
 9bc:	ce 01       	movw	r24, r28
 9be:	05 96       	adiw	r24, 0x05	; 5
 9c0:	b8 01       	movw	r22, r16
 9c2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 9c6:	89 85       	ldd	r24, Y+9	; 0x09
 9c8:	82 30       	cpi	r24, 0x02	; 2
 9ca:	40 f0       	brcs	.+16     	; 0x9dc <__gesf2+0x56>
 9cc:	89 89       	ldd	r24, Y+17	; 0x11
 9ce:	82 30       	cpi	r24, 0x02	; 2
 9d0:	28 f0       	brcs	.+10     	; 0x9dc <__gesf2+0x56>
 9d2:	c7 01       	movw	r24, r14
 9d4:	b8 01       	movw	r22, r16
 9d6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fpcmp_parts_f>
 9da:	01 c0       	rjmp	.+2      	; 0x9de <__gesf2+0x58>
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	68 96       	adiw	r28, 0x18	; 24
 9e0:	e6 e0       	ldi	r30, 0x06	; 6
 9e2:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__epilogue_restores__+0x18>

000009e6 <__ltsf2>:
 9e6:	a8 e1       	ldi	r26, 0x18	; 24
 9e8:	b0 e0       	ldi	r27, 0x00	; 0
 9ea:	e9 ef       	ldi	r30, 0xF9	; 249
 9ec:	f4 e0       	ldi	r31, 0x04	; 4
 9ee:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__prologue_saves__+0x18>
 9f2:	69 83       	std	Y+1, r22	; 0x01
 9f4:	7a 83       	std	Y+2, r23	; 0x02
 9f6:	8b 83       	std	Y+3, r24	; 0x03
 9f8:	9c 83       	std	Y+4, r25	; 0x04
 9fa:	2d 83       	std	Y+5, r18	; 0x05
 9fc:	3e 83       	std	Y+6, r19	; 0x06
 9fe:	4f 83       	std	Y+7, r20	; 0x07
 a00:	58 87       	std	Y+8, r21	; 0x08
 a02:	89 e0       	ldi	r24, 0x09	; 9
 a04:	e8 2e       	mov	r14, r24
 a06:	f1 2c       	mov	r15, r1
 a08:	ec 0e       	add	r14, r28
 a0a:	fd 1e       	adc	r15, r29
 a0c:	ce 01       	movw	r24, r28
 a0e:	01 96       	adiw	r24, 0x01	; 1
 a10:	b7 01       	movw	r22, r14
 a12:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 a16:	8e 01       	movw	r16, r28
 a18:	0f 5e       	subi	r16, 0xEF	; 239
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	ce 01       	movw	r24, r28
 a1e:	05 96       	adiw	r24, 0x05	; 5
 a20:	b8 01       	movw	r22, r16
 a22:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__unpack_f>
 a26:	89 85       	ldd	r24, Y+9	; 0x09
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	40 f0       	brcs	.+16     	; 0xa3c <__ltsf2+0x56>
 a2c:	89 89       	ldd	r24, Y+17	; 0x11
 a2e:	82 30       	cpi	r24, 0x02	; 2
 a30:	28 f0       	brcs	.+10     	; 0xa3c <__ltsf2+0x56>
 a32:	c7 01       	movw	r24, r14
 a34:	b8 01       	movw	r22, r16
 a36:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fpcmp_parts_f>
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__ltsf2+0x58>
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	68 96       	adiw	r28, 0x18	; 24
 a40:	e6 e0       	ldi	r30, 0x06	; 6
 a42:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__epilogue_restores__+0x18>

00000a46 <__floatsisf>:
 a46:	a8 e0       	ldi	r26, 0x08	; 8
 a48:	b0 e0       	ldi	r27, 0x00	; 0
 a4a:	e9 e2       	ldi	r30, 0x29	; 41
 a4c:	f5 e0       	ldi	r31, 0x05	; 5
 a4e:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__prologue_saves__+0x12>
 a52:	9b 01       	movw	r18, r22
 a54:	ac 01       	movw	r20, r24
 a56:	83 e0       	ldi	r24, 0x03	; 3
 a58:	89 83       	std	Y+1, r24	; 0x01
 a5a:	da 01       	movw	r26, r20
 a5c:	c9 01       	movw	r24, r18
 a5e:	88 27       	eor	r24, r24
 a60:	b7 fd       	sbrc	r27, 7
 a62:	83 95       	inc	r24
 a64:	99 27       	eor	r25, r25
 a66:	aa 27       	eor	r26, r26
 a68:	bb 27       	eor	r27, r27
 a6a:	b8 2e       	mov	r11, r24
 a6c:	21 15       	cp	r18, r1
 a6e:	31 05       	cpc	r19, r1
 a70:	41 05       	cpc	r20, r1
 a72:	51 05       	cpc	r21, r1
 a74:	19 f4       	brne	.+6      	; 0xa7c <__floatsisf+0x36>
 a76:	82 e0       	ldi	r24, 0x02	; 2
 a78:	89 83       	std	Y+1, r24	; 0x01
 a7a:	3a c0       	rjmp	.+116    	; 0xaf0 <__floatsisf+0xaa>
 a7c:	88 23       	and	r24, r24
 a7e:	a9 f0       	breq	.+42     	; 0xaaa <__floatsisf+0x64>
 a80:	20 30       	cpi	r18, 0x00	; 0
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	38 07       	cpc	r19, r24
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	48 07       	cpc	r20, r24
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	58 07       	cpc	r21, r24
 a8e:	29 f4       	brne	.+10     	; 0xa9a <__floatsisf+0x54>
 a90:	60 e0       	ldi	r22, 0x00	; 0
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	9f ec       	ldi	r25, 0xCF	; 207
 a98:	30 c0       	rjmp	.+96     	; 0xafa <__floatsisf+0xb4>
 a9a:	ee 24       	eor	r14, r14
 a9c:	ff 24       	eor	r15, r15
 a9e:	87 01       	movw	r16, r14
 aa0:	e2 1a       	sub	r14, r18
 aa2:	f3 0a       	sbc	r15, r19
 aa4:	04 0b       	sbc	r16, r20
 aa6:	15 0b       	sbc	r17, r21
 aa8:	02 c0       	rjmp	.+4      	; 0xaae <__floatsisf+0x68>
 aaa:	79 01       	movw	r14, r18
 aac:	8a 01       	movw	r16, r20
 aae:	8e e1       	ldi	r24, 0x1E	; 30
 ab0:	c8 2e       	mov	r12, r24
 ab2:	d1 2c       	mov	r13, r1
 ab4:	dc 82       	std	Y+4, r13	; 0x04
 ab6:	cb 82       	std	Y+3, r12	; 0x03
 ab8:	ed 82       	std	Y+5, r14	; 0x05
 aba:	fe 82       	std	Y+6, r15	; 0x06
 abc:	0f 83       	std	Y+7, r16	; 0x07
 abe:	18 87       	std	Y+8, r17	; 0x08
 ac0:	c8 01       	movw	r24, r16
 ac2:	b7 01       	movw	r22, r14
 ac4:	0e 94 81 05 	call	0xb02	; 0xb02 <__clzsi2>
 ac8:	01 97       	sbiw	r24, 0x01	; 1
 aca:	18 16       	cp	r1, r24
 acc:	19 06       	cpc	r1, r25
 ace:	84 f4       	brge	.+32     	; 0xaf0 <__floatsisf+0xaa>
 ad0:	08 2e       	mov	r0, r24
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <__floatsisf+0x96>
 ad4:	ee 0c       	add	r14, r14
 ad6:	ff 1c       	adc	r15, r15
 ad8:	00 1f       	adc	r16, r16
 ada:	11 1f       	adc	r17, r17
 adc:	0a 94       	dec	r0
 ade:	d2 f7       	brpl	.-12     	; 0xad4 <__floatsisf+0x8e>
 ae0:	ed 82       	std	Y+5, r14	; 0x05
 ae2:	fe 82       	std	Y+6, r15	; 0x06
 ae4:	0f 83       	std	Y+7, r16	; 0x07
 ae6:	18 87       	std	Y+8, r17	; 0x08
 ae8:	c8 1a       	sub	r12, r24
 aea:	d9 0a       	sbc	r13, r25
 aec:	dc 82       	std	Y+4, r13	; 0x04
 aee:	cb 82       	std	Y+3, r12	; 0x03
 af0:	ba 82       	std	Y+2, r11	; 0x02
 af2:	ce 01       	movw	r24, r28
 af4:	01 96       	adiw	r24, 0x01	; 1
 af6:	0e 94 d0 05 	call	0xba0	; 0xba0 <__pack_f>
 afa:	28 96       	adiw	r28, 0x08	; 8
 afc:	e9 e0       	ldi	r30, 0x09	; 9
 afe:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__epilogue_restores__+0x12>

00000b02 <__clzsi2>:
 b02:	ef 92       	push	r14
 b04:	ff 92       	push	r15
 b06:	0f 93       	push	r16
 b08:	1f 93       	push	r17
 b0a:	7b 01       	movw	r14, r22
 b0c:	8c 01       	movw	r16, r24
 b0e:	80 e0       	ldi	r24, 0x00	; 0
 b10:	e8 16       	cp	r14, r24
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	f8 06       	cpc	r15, r24
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	08 07       	cpc	r16, r24
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	18 07       	cpc	r17, r24
 b1e:	88 f4       	brcc	.+34     	; 0xb42 <__clzsi2+0x40>
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	e8 16       	cp	r14, r24
 b24:	f1 04       	cpc	r15, r1
 b26:	01 05       	cpc	r16, r1
 b28:	11 05       	cpc	r17, r1
 b2a:	31 f0       	breq	.+12     	; 0xb38 <__clzsi2+0x36>
 b2c:	28 f0       	brcs	.+10     	; 0xb38 <__clzsi2+0x36>
 b2e:	88 e0       	ldi	r24, 0x08	; 8
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	a0 e0       	ldi	r26, 0x00	; 0
 b34:	b0 e0       	ldi	r27, 0x00	; 0
 b36:	17 c0       	rjmp	.+46     	; 0xb66 <__clzsi2+0x64>
 b38:	80 e0       	ldi	r24, 0x00	; 0
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	a0 e0       	ldi	r26, 0x00	; 0
 b3e:	b0 e0       	ldi	r27, 0x00	; 0
 b40:	12 c0       	rjmp	.+36     	; 0xb66 <__clzsi2+0x64>
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	e8 16       	cp	r14, r24
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	f8 06       	cpc	r15, r24
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	08 07       	cpc	r16, r24
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	18 07       	cpc	r17, r24
 b52:	28 f0       	brcs	.+10     	; 0xb5e <__clzsi2+0x5c>
 b54:	88 e1       	ldi	r24, 0x18	; 24
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	a0 e0       	ldi	r26, 0x00	; 0
 b5a:	b0 e0       	ldi	r27, 0x00	; 0
 b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__clzsi2+0x64>
 b5e:	80 e1       	ldi	r24, 0x10	; 16
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	a0 e0       	ldi	r26, 0x00	; 0
 b64:	b0 e0       	ldi	r27, 0x00	; 0
 b66:	20 e2       	ldi	r18, 0x20	; 32
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	40 e0       	ldi	r20, 0x00	; 0
 b6c:	50 e0       	ldi	r21, 0x00	; 0
 b6e:	28 1b       	sub	r18, r24
 b70:	39 0b       	sbc	r19, r25
 b72:	4a 0b       	sbc	r20, r26
 b74:	5b 0b       	sbc	r21, r27
 b76:	04 c0       	rjmp	.+8      	; 0xb80 <__clzsi2+0x7e>
 b78:	16 95       	lsr	r17
 b7a:	07 95       	ror	r16
 b7c:	f7 94       	ror	r15
 b7e:	e7 94       	ror	r14
 b80:	8a 95       	dec	r24
 b82:	d2 f7       	brpl	.-12     	; 0xb78 <__clzsi2+0x76>
 b84:	f7 01       	movw	r30, r14
 b86:	e6 5c       	subi	r30, 0xC6	; 198
 b88:	fe 4f       	sbci	r31, 0xFE	; 254
 b8a:	80 81       	ld	r24, Z
 b8c:	28 1b       	sub	r18, r24
 b8e:	31 09       	sbc	r19, r1
 b90:	41 09       	sbc	r20, r1
 b92:	51 09       	sbc	r21, r1
 b94:	c9 01       	movw	r24, r18
 b96:	1f 91       	pop	r17
 b98:	0f 91       	pop	r16
 b9a:	ff 90       	pop	r15
 b9c:	ef 90       	pop	r14
 b9e:	08 95       	ret

00000ba0 <__pack_f>:
 ba0:	df 92       	push	r13
 ba2:	ef 92       	push	r14
 ba4:	ff 92       	push	r15
 ba6:	0f 93       	push	r16
 ba8:	1f 93       	push	r17
 baa:	fc 01       	movw	r30, r24
 bac:	e4 80       	ldd	r14, Z+4	; 0x04
 bae:	f5 80       	ldd	r15, Z+5	; 0x05
 bb0:	06 81       	ldd	r16, Z+6	; 0x06
 bb2:	17 81       	ldd	r17, Z+7	; 0x07
 bb4:	d1 80       	ldd	r13, Z+1	; 0x01
 bb6:	80 81       	ld	r24, Z
 bb8:	82 30       	cpi	r24, 0x02	; 2
 bba:	48 f4       	brcc	.+18     	; 0xbce <__pack_f+0x2e>
 bbc:	80 e0       	ldi	r24, 0x00	; 0
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	a0 e1       	ldi	r26, 0x10	; 16
 bc2:	b0 e0       	ldi	r27, 0x00	; 0
 bc4:	e8 2a       	or	r14, r24
 bc6:	f9 2a       	or	r15, r25
 bc8:	0a 2b       	or	r16, r26
 bca:	1b 2b       	or	r17, r27
 bcc:	a5 c0       	rjmp	.+330    	; 0xd18 <__pack_f+0x178>
 bce:	84 30       	cpi	r24, 0x04	; 4
 bd0:	09 f4       	brne	.+2      	; 0xbd4 <__pack_f+0x34>
 bd2:	9f c0       	rjmp	.+318    	; 0xd12 <__pack_f+0x172>
 bd4:	82 30       	cpi	r24, 0x02	; 2
 bd6:	21 f4       	brne	.+8      	; 0xbe0 <__pack_f+0x40>
 bd8:	ee 24       	eor	r14, r14
 bda:	ff 24       	eor	r15, r15
 bdc:	87 01       	movw	r16, r14
 bde:	05 c0       	rjmp	.+10     	; 0xbea <__pack_f+0x4a>
 be0:	e1 14       	cp	r14, r1
 be2:	f1 04       	cpc	r15, r1
 be4:	01 05       	cpc	r16, r1
 be6:	11 05       	cpc	r17, r1
 be8:	19 f4       	brne	.+6      	; 0xbf0 <__pack_f+0x50>
 bea:	e0 e0       	ldi	r30, 0x00	; 0
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	96 c0       	rjmp	.+300    	; 0xd1c <__pack_f+0x17c>
 bf0:	62 81       	ldd	r22, Z+2	; 0x02
 bf2:	73 81       	ldd	r23, Z+3	; 0x03
 bf4:	9f ef       	ldi	r25, 0xFF	; 255
 bf6:	62 38       	cpi	r22, 0x82	; 130
 bf8:	79 07       	cpc	r23, r25
 bfa:	0c f0       	brlt	.+2      	; 0xbfe <__pack_f+0x5e>
 bfc:	5b c0       	rjmp	.+182    	; 0xcb4 <__pack_f+0x114>
 bfe:	22 e8       	ldi	r18, 0x82	; 130
 c00:	3f ef       	ldi	r19, 0xFF	; 255
 c02:	26 1b       	sub	r18, r22
 c04:	37 0b       	sbc	r19, r23
 c06:	2a 31       	cpi	r18, 0x1A	; 26
 c08:	31 05       	cpc	r19, r1
 c0a:	2c f0       	brlt	.+10     	; 0xc16 <__pack_f+0x76>
 c0c:	20 e0       	ldi	r18, 0x00	; 0
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	40 e0       	ldi	r20, 0x00	; 0
 c12:	50 e0       	ldi	r21, 0x00	; 0
 c14:	2a c0       	rjmp	.+84     	; 0xc6a <__pack_f+0xca>
 c16:	b8 01       	movw	r22, r16
 c18:	a7 01       	movw	r20, r14
 c1a:	02 2e       	mov	r0, r18
 c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__pack_f+0x86>
 c1e:	76 95       	lsr	r23
 c20:	67 95       	ror	r22
 c22:	57 95       	ror	r21
 c24:	47 95       	ror	r20
 c26:	0a 94       	dec	r0
 c28:	d2 f7       	brpl	.-12     	; 0xc1e <__pack_f+0x7e>
 c2a:	81 e0       	ldi	r24, 0x01	; 1
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	a0 e0       	ldi	r26, 0x00	; 0
 c30:	b0 e0       	ldi	r27, 0x00	; 0
 c32:	04 c0       	rjmp	.+8      	; 0xc3c <__pack_f+0x9c>
 c34:	88 0f       	add	r24, r24
 c36:	99 1f       	adc	r25, r25
 c38:	aa 1f       	adc	r26, r26
 c3a:	bb 1f       	adc	r27, r27
 c3c:	2a 95       	dec	r18
 c3e:	d2 f7       	brpl	.-12     	; 0xc34 <__pack_f+0x94>
 c40:	01 97       	sbiw	r24, 0x01	; 1
 c42:	a1 09       	sbc	r26, r1
 c44:	b1 09       	sbc	r27, r1
 c46:	8e 21       	and	r24, r14
 c48:	9f 21       	and	r25, r15
 c4a:	a0 23       	and	r26, r16
 c4c:	b1 23       	and	r27, r17
 c4e:	00 97       	sbiw	r24, 0x00	; 0
 c50:	a1 05       	cpc	r26, r1
 c52:	b1 05       	cpc	r27, r1
 c54:	21 f0       	breq	.+8      	; 0xc5e <__pack_f+0xbe>
 c56:	81 e0       	ldi	r24, 0x01	; 1
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	a0 e0       	ldi	r26, 0x00	; 0
 c5c:	b0 e0       	ldi	r27, 0x00	; 0
 c5e:	9a 01       	movw	r18, r20
 c60:	ab 01       	movw	r20, r22
 c62:	28 2b       	or	r18, r24
 c64:	39 2b       	or	r19, r25
 c66:	4a 2b       	or	r20, r26
 c68:	5b 2b       	or	r21, r27
 c6a:	da 01       	movw	r26, r20
 c6c:	c9 01       	movw	r24, r18
 c6e:	8f 77       	andi	r24, 0x7F	; 127
 c70:	90 70       	andi	r25, 0x00	; 0
 c72:	a0 70       	andi	r26, 0x00	; 0
 c74:	b0 70       	andi	r27, 0x00	; 0
 c76:	80 34       	cpi	r24, 0x40	; 64
 c78:	91 05       	cpc	r25, r1
 c7a:	a1 05       	cpc	r26, r1
 c7c:	b1 05       	cpc	r27, r1
 c7e:	39 f4       	brne	.+14     	; 0xc8e <__pack_f+0xee>
 c80:	27 ff       	sbrs	r18, 7
 c82:	09 c0       	rjmp	.+18     	; 0xc96 <__pack_f+0xf6>
 c84:	20 5c       	subi	r18, 0xC0	; 192
 c86:	3f 4f       	sbci	r19, 0xFF	; 255
 c88:	4f 4f       	sbci	r20, 0xFF	; 255
 c8a:	5f 4f       	sbci	r21, 0xFF	; 255
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <__pack_f+0xf6>
 c8e:	21 5c       	subi	r18, 0xC1	; 193
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	4f 4f       	sbci	r20, 0xFF	; 255
 c94:	5f 4f       	sbci	r21, 0xFF	; 255
 c96:	e0 e0       	ldi	r30, 0x00	; 0
 c98:	f0 e0       	ldi	r31, 0x00	; 0
 c9a:	20 30       	cpi	r18, 0x00	; 0
 c9c:	a0 e0       	ldi	r26, 0x00	; 0
 c9e:	3a 07       	cpc	r19, r26
 ca0:	a0 e0       	ldi	r26, 0x00	; 0
 ca2:	4a 07       	cpc	r20, r26
 ca4:	a0 e4       	ldi	r26, 0x40	; 64
 ca6:	5a 07       	cpc	r21, r26
 ca8:	10 f0       	brcs	.+4      	; 0xcae <__pack_f+0x10e>
 caa:	e1 e0       	ldi	r30, 0x01	; 1
 cac:	f0 e0       	ldi	r31, 0x00	; 0
 cae:	79 01       	movw	r14, r18
 cb0:	8a 01       	movw	r16, r20
 cb2:	27 c0       	rjmp	.+78     	; 0xd02 <__pack_f+0x162>
 cb4:	60 38       	cpi	r22, 0x80	; 128
 cb6:	71 05       	cpc	r23, r1
 cb8:	64 f5       	brge	.+88     	; 0xd12 <__pack_f+0x172>
 cba:	fb 01       	movw	r30, r22
 cbc:	e1 58       	subi	r30, 0x81	; 129
 cbe:	ff 4f       	sbci	r31, 0xFF	; 255
 cc0:	d8 01       	movw	r26, r16
 cc2:	c7 01       	movw	r24, r14
 cc4:	8f 77       	andi	r24, 0x7F	; 127
 cc6:	90 70       	andi	r25, 0x00	; 0
 cc8:	a0 70       	andi	r26, 0x00	; 0
 cca:	b0 70       	andi	r27, 0x00	; 0
 ccc:	80 34       	cpi	r24, 0x40	; 64
 cce:	91 05       	cpc	r25, r1
 cd0:	a1 05       	cpc	r26, r1
 cd2:	b1 05       	cpc	r27, r1
 cd4:	39 f4       	brne	.+14     	; 0xce4 <__pack_f+0x144>
 cd6:	e7 fe       	sbrs	r14, 7
 cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <__pack_f+0x154>
 cda:	80 e4       	ldi	r24, 0x40	; 64
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	a0 e0       	ldi	r26, 0x00	; 0
 ce0:	b0 e0       	ldi	r27, 0x00	; 0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <__pack_f+0x14c>
 ce4:	8f e3       	ldi	r24, 0x3F	; 63
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	a0 e0       	ldi	r26, 0x00	; 0
 cea:	b0 e0       	ldi	r27, 0x00	; 0
 cec:	e8 0e       	add	r14, r24
 cee:	f9 1e       	adc	r15, r25
 cf0:	0a 1f       	adc	r16, r26
 cf2:	1b 1f       	adc	r17, r27
 cf4:	17 ff       	sbrs	r17, 7
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <__pack_f+0x162>
 cf8:	16 95       	lsr	r17
 cfa:	07 95       	ror	r16
 cfc:	f7 94       	ror	r15
 cfe:	e7 94       	ror	r14
 d00:	31 96       	adiw	r30, 0x01	; 1
 d02:	87 e0       	ldi	r24, 0x07	; 7
 d04:	16 95       	lsr	r17
 d06:	07 95       	ror	r16
 d08:	f7 94       	ror	r15
 d0a:	e7 94       	ror	r14
 d0c:	8a 95       	dec	r24
 d0e:	d1 f7       	brne	.-12     	; 0xd04 <__pack_f+0x164>
 d10:	05 c0       	rjmp	.+10     	; 0xd1c <__pack_f+0x17c>
 d12:	ee 24       	eor	r14, r14
 d14:	ff 24       	eor	r15, r15
 d16:	87 01       	movw	r16, r14
 d18:	ef ef       	ldi	r30, 0xFF	; 255
 d1a:	f0 e0       	ldi	r31, 0x00	; 0
 d1c:	6e 2f       	mov	r22, r30
 d1e:	67 95       	ror	r22
 d20:	66 27       	eor	r22, r22
 d22:	67 95       	ror	r22
 d24:	90 2f       	mov	r25, r16
 d26:	9f 77       	andi	r25, 0x7F	; 127
 d28:	d7 94       	ror	r13
 d2a:	dd 24       	eor	r13, r13
 d2c:	d7 94       	ror	r13
 d2e:	8e 2f       	mov	r24, r30
 d30:	86 95       	lsr	r24
 d32:	49 2f       	mov	r20, r25
 d34:	46 2b       	or	r20, r22
 d36:	58 2f       	mov	r21, r24
 d38:	5d 29       	or	r21, r13
 d3a:	b7 01       	movw	r22, r14
 d3c:	ca 01       	movw	r24, r20
 d3e:	1f 91       	pop	r17
 d40:	0f 91       	pop	r16
 d42:	ff 90       	pop	r15
 d44:	ef 90       	pop	r14
 d46:	df 90       	pop	r13
 d48:	08 95       	ret

00000d4a <__unpack_f>:
 d4a:	fc 01       	movw	r30, r24
 d4c:	db 01       	movw	r26, r22
 d4e:	40 81       	ld	r20, Z
 d50:	51 81       	ldd	r21, Z+1	; 0x01
 d52:	22 81       	ldd	r18, Z+2	; 0x02
 d54:	62 2f       	mov	r22, r18
 d56:	6f 77       	andi	r22, 0x7F	; 127
 d58:	70 e0       	ldi	r23, 0x00	; 0
 d5a:	22 1f       	adc	r18, r18
 d5c:	22 27       	eor	r18, r18
 d5e:	22 1f       	adc	r18, r18
 d60:	93 81       	ldd	r25, Z+3	; 0x03
 d62:	89 2f       	mov	r24, r25
 d64:	88 0f       	add	r24, r24
 d66:	82 2b       	or	r24, r18
 d68:	28 2f       	mov	r18, r24
 d6a:	30 e0       	ldi	r19, 0x00	; 0
 d6c:	99 1f       	adc	r25, r25
 d6e:	99 27       	eor	r25, r25
 d70:	99 1f       	adc	r25, r25
 d72:	11 96       	adiw	r26, 0x01	; 1
 d74:	9c 93       	st	X, r25
 d76:	11 97       	sbiw	r26, 0x01	; 1
 d78:	21 15       	cp	r18, r1
 d7a:	31 05       	cpc	r19, r1
 d7c:	a9 f5       	brne	.+106    	; 0xde8 <__unpack_f+0x9e>
 d7e:	41 15       	cp	r20, r1
 d80:	51 05       	cpc	r21, r1
 d82:	61 05       	cpc	r22, r1
 d84:	71 05       	cpc	r23, r1
 d86:	11 f4       	brne	.+4      	; 0xd8c <__unpack_f+0x42>
 d88:	82 e0       	ldi	r24, 0x02	; 2
 d8a:	37 c0       	rjmp	.+110    	; 0xdfa <__unpack_f+0xb0>
 d8c:	82 e8       	ldi	r24, 0x82	; 130
 d8e:	9f ef       	ldi	r25, 0xFF	; 255
 d90:	13 96       	adiw	r26, 0x03	; 3
 d92:	9c 93       	st	X, r25
 d94:	8e 93       	st	-X, r24
 d96:	12 97       	sbiw	r26, 0x02	; 2
 d98:	9a 01       	movw	r18, r20
 d9a:	ab 01       	movw	r20, r22
 d9c:	67 e0       	ldi	r22, 0x07	; 7
 d9e:	22 0f       	add	r18, r18
 da0:	33 1f       	adc	r19, r19
 da2:	44 1f       	adc	r20, r20
 da4:	55 1f       	adc	r21, r21
 da6:	6a 95       	dec	r22
 da8:	d1 f7       	brne	.-12     	; 0xd9e <__unpack_f+0x54>
 daa:	83 e0       	ldi	r24, 0x03	; 3
 dac:	8c 93       	st	X, r24
 dae:	0d c0       	rjmp	.+26     	; 0xdca <__unpack_f+0x80>
 db0:	22 0f       	add	r18, r18
 db2:	33 1f       	adc	r19, r19
 db4:	44 1f       	adc	r20, r20
 db6:	55 1f       	adc	r21, r21
 db8:	12 96       	adiw	r26, 0x02	; 2
 dba:	8d 91       	ld	r24, X+
 dbc:	9c 91       	ld	r25, X
 dbe:	13 97       	sbiw	r26, 0x03	; 3
 dc0:	01 97       	sbiw	r24, 0x01	; 1
 dc2:	13 96       	adiw	r26, 0x03	; 3
 dc4:	9c 93       	st	X, r25
 dc6:	8e 93       	st	-X, r24
 dc8:	12 97       	sbiw	r26, 0x02	; 2
 dca:	20 30       	cpi	r18, 0x00	; 0
 dcc:	80 e0       	ldi	r24, 0x00	; 0
 dce:	38 07       	cpc	r19, r24
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	48 07       	cpc	r20, r24
 dd4:	80 e4       	ldi	r24, 0x40	; 64
 dd6:	58 07       	cpc	r21, r24
 dd8:	58 f3       	brcs	.-42     	; 0xdb0 <__unpack_f+0x66>
 dda:	14 96       	adiw	r26, 0x04	; 4
 ddc:	2d 93       	st	X+, r18
 dde:	3d 93       	st	X+, r19
 de0:	4d 93       	st	X+, r20
 de2:	5c 93       	st	X, r21
 de4:	17 97       	sbiw	r26, 0x07	; 7
 de6:	08 95       	ret
 de8:	2f 3f       	cpi	r18, 0xFF	; 255
 dea:	31 05       	cpc	r19, r1
 dec:	79 f4       	brne	.+30     	; 0xe0c <__unpack_f+0xc2>
 dee:	41 15       	cp	r20, r1
 df0:	51 05       	cpc	r21, r1
 df2:	61 05       	cpc	r22, r1
 df4:	71 05       	cpc	r23, r1
 df6:	19 f4       	brne	.+6      	; 0xdfe <__unpack_f+0xb4>
 df8:	84 e0       	ldi	r24, 0x04	; 4
 dfa:	8c 93       	st	X, r24
 dfc:	08 95       	ret
 dfe:	64 ff       	sbrs	r22, 4
 e00:	03 c0       	rjmp	.+6      	; 0xe08 <__unpack_f+0xbe>
 e02:	81 e0       	ldi	r24, 0x01	; 1
 e04:	8c 93       	st	X, r24
 e06:	12 c0       	rjmp	.+36     	; 0xe2c <__unpack_f+0xe2>
 e08:	1c 92       	st	X, r1
 e0a:	10 c0       	rjmp	.+32     	; 0xe2c <__unpack_f+0xe2>
 e0c:	2f 57       	subi	r18, 0x7F	; 127
 e0e:	30 40       	sbci	r19, 0x00	; 0
 e10:	13 96       	adiw	r26, 0x03	; 3
 e12:	3c 93       	st	X, r19
 e14:	2e 93       	st	-X, r18
 e16:	12 97       	sbiw	r26, 0x02	; 2
 e18:	83 e0       	ldi	r24, 0x03	; 3
 e1a:	8c 93       	st	X, r24
 e1c:	87 e0       	ldi	r24, 0x07	; 7
 e1e:	44 0f       	add	r20, r20
 e20:	55 1f       	adc	r21, r21
 e22:	66 1f       	adc	r22, r22
 e24:	77 1f       	adc	r23, r23
 e26:	8a 95       	dec	r24
 e28:	d1 f7       	brne	.-12     	; 0xe1e <__unpack_f+0xd4>
 e2a:	70 64       	ori	r23, 0x40	; 64
 e2c:	14 96       	adiw	r26, 0x04	; 4
 e2e:	4d 93       	st	X+, r20
 e30:	5d 93       	st	X+, r21
 e32:	6d 93       	st	X+, r22
 e34:	7c 93       	st	X, r23
 e36:	17 97       	sbiw	r26, 0x07	; 7
 e38:	08 95       	ret

00000e3a <__fpcmp_parts_f>:
 e3a:	1f 93       	push	r17
 e3c:	dc 01       	movw	r26, r24
 e3e:	fb 01       	movw	r30, r22
 e40:	9c 91       	ld	r25, X
 e42:	92 30       	cpi	r25, 0x02	; 2
 e44:	08 f4       	brcc	.+2      	; 0xe48 <__fpcmp_parts_f+0xe>
 e46:	47 c0       	rjmp	.+142    	; 0xed6 <__fpcmp_parts_f+0x9c>
 e48:	80 81       	ld	r24, Z
 e4a:	82 30       	cpi	r24, 0x02	; 2
 e4c:	08 f4       	brcc	.+2      	; 0xe50 <__fpcmp_parts_f+0x16>
 e4e:	43 c0       	rjmp	.+134    	; 0xed6 <__fpcmp_parts_f+0x9c>
 e50:	94 30       	cpi	r25, 0x04	; 4
 e52:	51 f4       	brne	.+20     	; 0xe68 <__fpcmp_parts_f+0x2e>
 e54:	11 96       	adiw	r26, 0x01	; 1
 e56:	1c 91       	ld	r17, X
 e58:	84 30       	cpi	r24, 0x04	; 4
 e5a:	99 f5       	brne	.+102    	; 0xec2 <__fpcmp_parts_f+0x88>
 e5c:	81 81       	ldd	r24, Z+1	; 0x01
 e5e:	68 2f       	mov	r22, r24
 e60:	70 e0       	ldi	r23, 0x00	; 0
 e62:	61 1b       	sub	r22, r17
 e64:	71 09       	sbc	r23, r1
 e66:	3f c0       	rjmp	.+126    	; 0xee6 <__fpcmp_parts_f+0xac>
 e68:	84 30       	cpi	r24, 0x04	; 4
 e6a:	21 f0       	breq	.+8      	; 0xe74 <__fpcmp_parts_f+0x3a>
 e6c:	92 30       	cpi	r25, 0x02	; 2
 e6e:	31 f4       	brne	.+12     	; 0xe7c <__fpcmp_parts_f+0x42>
 e70:	82 30       	cpi	r24, 0x02	; 2
 e72:	b9 f1       	breq	.+110    	; 0xee2 <__fpcmp_parts_f+0xa8>
 e74:	81 81       	ldd	r24, Z+1	; 0x01
 e76:	88 23       	and	r24, r24
 e78:	89 f1       	breq	.+98     	; 0xedc <__fpcmp_parts_f+0xa2>
 e7a:	2d c0       	rjmp	.+90     	; 0xed6 <__fpcmp_parts_f+0x9c>
 e7c:	11 96       	adiw	r26, 0x01	; 1
 e7e:	1c 91       	ld	r17, X
 e80:	11 97       	sbiw	r26, 0x01	; 1
 e82:	82 30       	cpi	r24, 0x02	; 2
 e84:	f1 f0       	breq	.+60     	; 0xec2 <__fpcmp_parts_f+0x88>
 e86:	81 81       	ldd	r24, Z+1	; 0x01
 e88:	18 17       	cp	r17, r24
 e8a:	d9 f4       	brne	.+54     	; 0xec2 <__fpcmp_parts_f+0x88>
 e8c:	12 96       	adiw	r26, 0x02	; 2
 e8e:	2d 91       	ld	r18, X+
 e90:	3c 91       	ld	r19, X
 e92:	13 97       	sbiw	r26, 0x03	; 3
 e94:	82 81       	ldd	r24, Z+2	; 0x02
 e96:	93 81       	ldd	r25, Z+3	; 0x03
 e98:	82 17       	cp	r24, r18
 e9a:	93 07       	cpc	r25, r19
 e9c:	94 f0       	brlt	.+36     	; 0xec2 <__fpcmp_parts_f+0x88>
 e9e:	28 17       	cp	r18, r24
 ea0:	39 07       	cpc	r19, r25
 ea2:	bc f0       	brlt	.+46     	; 0xed2 <__fpcmp_parts_f+0x98>
 ea4:	14 96       	adiw	r26, 0x04	; 4
 ea6:	8d 91       	ld	r24, X+
 ea8:	9d 91       	ld	r25, X+
 eaa:	0d 90       	ld	r0, X+
 eac:	bc 91       	ld	r27, X
 eae:	a0 2d       	mov	r26, r0
 eb0:	24 81       	ldd	r18, Z+4	; 0x04
 eb2:	35 81       	ldd	r19, Z+5	; 0x05
 eb4:	46 81       	ldd	r20, Z+6	; 0x06
 eb6:	57 81       	ldd	r21, Z+7	; 0x07
 eb8:	28 17       	cp	r18, r24
 eba:	39 07       	cpc	r19, r25
 ebc:	4a 07       	cpc	r20, r26
 ebe:	5b 07       	cpc	r21, r27
 ec0:	18 f4       	brcc	.+6      	; 0xec8 <__fpcmp_parts_f+0x8e>
 ec2:	11 23       	and	r17, r17
 ec4:	41 f0       	breq	.+16     	; 0xed6 <__fpcmp_parts_f+0x9c>
 ec6:	0a c0       	rjmp	.+20     	; 0xedc <__fpcmp_parts_f+0xa2>
 ec8:	82 17       	cp	r24, r18
 eca:	93 07       	cpc	r25, r19
 ecc:	a4 07       	cpc	r26, r20
 ece:	b5 07       	cpc	r27, r21
 ed0:	40 f4       	brcc	.+16     	; 0xee2 <__fpcmp_parts_f+0xa8>
 ed2:	11 23       	and	r17, r17
 ed4:	19 f0       	breq	.+6      	; 0xedc <__fpcmp_parts_f+0xa2>
 ed6:	61 e0       	ldi	r22, 0x01	; 1
 ed8:	70 e0       	ldi	r23, 0x00	; 0
 eda:	05 c0       	rjmp	.+10     	; 0xee6 <__fpcmp_parts_f+0xac>
 edc:	6f ef       	ldi	r22, 0xFF	; 255
 ede:	7f ef       	ldi	r23, 0xFF	; 255
 ee0:	02 c0       	rjmp	.+4      	; 0xee6 <__fpcmp_parts_f+0xac>
 ee2:	60 e0       	ldi	r22, 0x00	; 0
 ee4:	70 e0       	ldi	r23, 0x00	; 0
 ee6:	cb 01       	movw	r24, r22
 ee8:	1f 91       	pop	r17
 eea:	08 95       	ret

00000eec <__divmodhi4>:
 eec:	97 fb       	bst	r25, 7
 eee:	09 2e       	mov	r0, r25
 ef0:	07 26       	eor	r0, r23
 ef2:	0a d0       	rcall	.+20     	; 0xf08 <__divmodhi4_neg1>
 ef4:	77 fd       	sbrc	r23, 7
 ef6:	04 d0       	rcall	.+8      	; 0xf00 <__divmodhi4_neg2>
 ef8:	0c d0       	rcall	.+24     	; 0xf12 <__udivmodhi4>
 efa:	06 d0       	rcall	.+12     	; 0xf08 <__divmodhi4_neg1>
 efc:	00 20       	and	r0, r0
 efe:	1a f4       	brpl	.+6      	; 0xf06 <__divmodhi4_exit>

00000f00 <__divmodhi4_neg2>:
 f00:	70 95       	com	r23
 f02:	61 95       	neg	r22
 f04:	7f 4f       	sbci	r23, 0xFF	; 255

00000f06 <__divmodhi4_exit>:
 f06:	08 95       	ret

00000f08 <__divmodhi4_neg1>:
 f08:	f6 f7       	brtc	.-4      	; 0xf06 <__divmodhi4_exit>
 f0a:	90 95       	com	r25
 f0c:	81 95       	neg	r24
 f0e:	9f 4f       	sbci	r25, 0xFF	; 255
 f10:	08 95       	ret

00000f12 <__udivmodhi4>:
 f12:	aa 1b       	sub	r26, r26
 f14:	bb 1b       	sub	r27, r27
 f16:	51 e1       	ldi	r21, 0x11	; 17
 f18:	07 c0       	rjmp	.+14     	; 0xf28 <__udivmodhi4_ep>

00000f1a <__udivmodhi4_loop>:
 f1a:	aa 1f       	adc	r26, r26
 f1c:	bb 1f       	adc	r27, r27
 f1e:	a6 17       	cp	r26, r22
 f20:	b7 07       	cpc	r27, r23
 f22:	10 f0       	brcs	.+4      	; 0xf28 <__udivmodhi4_ep>
 f24:	a6 1b       	sub	r26, r22
 f26:	b7 0b       	sbc	r27, r23

00000f28 <__udivmodhi4_ep>:
 f28:	88 1f       	adc	r24, r24
 f2a:	99 1f       	adc	r25, r25
 f2c:	5a 95       	dec	r21
 f2e:	a9 f7       	brne	.-22     	; 0xf1a <__udivmodhi4_loop>
 f30:	80 95       	com	r24
 f32:	90 95       	com	r25
 f34:	bc 01       	movw	r22, r24
 f36:	cd 01       	movw	r24, r26
 f38:	08 95       	ret

00000f3a <__prologue_saves__>:
 f3a:	2f 92       	push	r2
 f3c:	3f 92       	push	r3
 f3e:	4f 92       	push	r4
 f40:	5f 92       	push	r5
 f42:	6f 92       	push	r6
 f44:	7f 92       	push	r7
 f46:	8f 92       	push	r8
 f48:	9f 92       	push	r9
 f4a:	af 92       	push	r10
 f4c:	bf 92       	push	r11
 f4e:	cf 92       	push	r12
 f50:	df 92       	push	r13
 f52:	ef 92       	push	r14
 f54:	ff 92       	push	r15
 f56:	0f 93       	push	r16
 f58:	1f 93       	push	r17
 f5a:	cf 93       	push	r28
 f5c:	df 93       	push	r29
 f5e:	cd b7       	in	r28, 0x3d	; 61
 f60:	de b7       	in	r29, 0x3e	; 62
 f62:	ca 1b       	sub	r28, r26
 f64:	db 0b       	sbc	r29, r27
 f66:	0f b6       	in	r0, 0x3f	; 63
 f68:	f8 94       	cli
 f6a:	de bf       	out	0x3e, r29	; 62
 f6c:	0f be       	out	0x3f, r0	; 63
 f6e:	cd bf       	out	0x3d, r28	; 61
 f70:	09 94       	ijmp

00000f72 <__epilogue_restores__>:
 f72:	2a 88       	ldd	r2, Y+18	; 0x12
 f74:	39 88       	ldd	r3, Y+17	; 0x11
 f76:	48 88       	ldd	r4, Y+16	; 0x10
 f78:	5f 84       	ldd	r5, Y+15	; 0x0f
 f7a:	6e 84       	ldd	r6, Y+14	; 0x0e
 f7c:	7d 84       	ldd	r7, Y+13	; 0x0d
 f7e:	8c 84       	ldd	r8, Y+12	; 0x0c
 f80:	9b 84       	ldd	r9, Y+11	; 0x0b
 f82:	aa 84       	ldd	r10, Y+10	; 0x0a
 f84:	b9 84       	ldd	r11, Y+9	; 0x09
 f86:	c8 84       	ldd	r12, Y+8	; 0x08
 f88:	df 80       	ldd	r13, Y+7	; 0x07
 f8a:	ee 80       	ldd	r14, Y+6	; 0x06
 f8c:	fd 80       	ldd	r15, Y+5	; 0x05
 f8e:	0c 81       	ldd	r16, Y+4	; 0x04
 f90:	1b 81       	ldd	r17, Y+3	; 0x03
 f92:	aa 81       	ldd	r26, Y+2	; 0x02
 f94:	b9 81       	ldd	r27, Y+1	; 0x01
 f96:	ce 0f       	add	r28, r30
 f98:	d1 1d       	adc	r29, r1
 f9a:	0f b6       	in	r0, 0x3f	; 63
 f9c:	f8 94       	cli
 f9e:	de bf       	out	0x3e, r29	; 62
 fa0:	0f be       	out	0x3f, r0	; 63
 fa2:	cd bf       	out	0x3d, r28	; 61
 fa4:	ed 01       	movw	r28, r26
 fa6:	08 95       	ret

00000fa8 <_exit>:
 fa8:	f8 94       	cli

00000faa <__stop_program>:
 faa:	ff cf       	rjmp	.-2      	; 0xfaa <__stop_program>
